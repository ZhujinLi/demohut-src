doctype html
html

body
    h3 Quaternions

    p Quaternion is a tool for rotation around an arbitrary axis. Compared with rotation matrix, it is more compact in representation and more efficient when it comes to tasks like slerp. Moreover, it avoids the dreaded gimbal lock issue with Euler Angle.
    
    p Although quaternions were invented in 1843 as an extension to the complex numbers, it was not until 1985 that it was introduced to computer graphics.
    
    p Note that only with unit quaternions are we able to perform rotations. Make sure they are normalized before you use them.

    div(class="container")
        div(class="row" class="text-monospace")
            div(class="px-0", id="view-quat")
            div(class="col-md-3")
                h6 Angle
                div(class="row")
                    div(class="col-md")
                        input(type="range", class="custom-range", id="slider-angle")
                    div(class="col-md", id="label-angle")
                h6 Axis
                div(class="row")
                    div(class="col-md")
                        input(type="range", class="custom-range", id="slider-axis-x")
                    div(class="col-md", id="label-axis-x")
                div(class="row")
                    div(class="col-md")
                        input(type="range", class="custom-range", id="slider-axis-y")
                    div(class="col-md", id="label-axis-y")
                div(class="row")
                    div(class="col-md")
                        input(type="range", class="custom-range", id="slider-axis-z")
                    div(class="col-md", id="label-axis-z")
            div(class="col-md-3")
                h6 Unit Quaternion
                div(id="label-quat-res")

    h3 Interpolation

    p Interpolation is an operation that, given two unit quaternions, q and r, and a parameter t in the range[0, 1], computes an interpolated quaternion. It is often used to perform animations.
    
    dl
        dt Linear interpolation (lerp)

        dd This is the simplest and most efficient one of the three. As you can see from the demo below, it produces a straight trace. The downside is that the rotation speed is not constant (as it is then projected to the hypersphere), generally faster in the middle.
    
        dt Spherical linear interpolation (slerp)

        dd Unlike lerp, slerp produces evenly distributed samples along the arc on the hypersphere, which provides a better experience of animation.
    
        dt Spherical cubic interpolation (squad)

        dd As you can see from the demo, with lerp or slerp there are sudden jerks when a new animation begins. This is because the trace direction is not continuous, even though the trace itself is. Using some sort of spline it can be solved, and the trace gets really smooth at the turns. Note that this method requires the knowledge of the next animation target's position in advance.
    
    div(class="container")
    div(class="row")
        div(class="col-md", id="view-slerp-world")
        div(class="col-md", id="view-slerp-sphere")
        div(class="col-md")
            div(class="container")
                form
                    div(class="radio")
                        label
                            input(type="radio", id="radio-lerp")
                            |  lerp
                    div(class="radio")
                        label
                            input(type="radio", id="radio-slerp")
                            |  slerp
                    div(class="radio")
                        label
                            input(type="radio", id="radio-squad")
                            |  squad

    p Although we cannot visualize the 4-D unit hypersphere, here is a workaround: projecting (x, y, z) entries directly into 3-D space, and indicating the magnitude of w by the 3-D sphere's radius. The larger the radius, the lesser the w.

    script(src="/javascripts/subj-quaternions.js", type="module")

    h3 References

    ul
        li RTR-3rd ch. 4.3
        li Model is from #[a(href="https://poly.google.com/view/bgUY8zN2Bq9") here]
        li #[a(href="https://threejs.org/examples/webgl_math_orientation_transform.html") A simplified demo]
        li #[a(href="https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#The_hypersphere_of_rotations") Wiki - visualization]
        li #[a(href="https://youtu.be/4mXL751ko0w") Quick understanding]
        li #[a(href="https://tiborstanko.sk/lerp-vs-slerp.html") A 2D demo]